# Generated by Django 4.2.9 on 2024-03-04 22:57

from django.conf import settings
from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='CustomUser',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('email', models.EmailField(max_length=254, unique=True)),
                ('first_name', models.CharField(max_length=30)),
                ('last_name', models.CharField(max_length=30)),
                ('is_business_owner', models.BooleanField(default=False)),
                ('business_name', models.CharField(blank=True, max_length=255, null=True)),
                ('city_location', models.CharField(blank=True, max_length=100, null=True)),
                ('mobile_number', models.CharField(blank=True, max_length=20, null=True)),
                ('website', models.URLField(blank=True, null=True)),
                ('is_active', models.BooleanField(default=True)),
                ('is_staff', models.BooleanField(default=False)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Amenity',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(choices=[('PARKING', 'Parking'), ('LOCKER', 'Locker'), ('SHOWER', 'Shower'), ('SAUNA', 'Sauna'), ('POOL', 'Swimming Pool'), ('PERSONAL_TRAINING', 'Personal Training'), ('STEAM_ROOM', 'Steam Room'), ('CARDIO_EQUIPMENT', 'Cardio Equipment'), ('NUTRITIONAL_SUPPORT', 'Nutritional Support'), ('CHILD_CARE', 'Child Care'), ('GROUP_CLASSES', 'Group Classes'), ('SUNDAY_OPEN', 'Sunday Open'), ('24_HOUR', '24-Hour')], max_length=100, unique=True)),
            ],
        ),
        migrations.CreateModel(
            name='ClassCategory',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(choices=[('YOGA', 'Yoga'), ('CROSSFIT', 'CrossFit'), ('STRENGTH', 'Strength Training'), ('ZUMBA', 'Zumba'), ('SWIMMING', 'Swimming'), ('BOXING', 'Boxing'), ('CYCLING', 'Cycling'), ('PILATES', 'Pilates'), ('DANCE', 'Dance'), ('MEDITATION', 'Meditation'), ('MASSAGES', 'Massages'), ('MARTIAL_ARTS', 'Martial Arts'), ('PRENATAL_CLASS', 'Prenatal Class')], max_length=100, unique=True)),
            ],
        ),
        migrations.CreateModel(
            name='ContactInfo',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('email', models.EmailField(max_length=254)),
                ('phone', models.CharField(max_length=20)),
                ('website', models.URLField(blank=True, null=True)),
            ],
        ),
        migrations.CreateModel(
            name='Gym',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255)),
                ('description', models.TextField()),
                ('free_trial', models.BooleanField(default=False)),
                ('classes_available', models.BooleanField(default=False)),
                ('amenities', models.ManyToManyField(blank=True, to='gymFindr.amenity')),
                ('classes', models.ManyToManyField(blank=True, to='gymFindr.classcategory')),
                ('contact_info', models.OneToOneField(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='gymFindr.contactinfo')),
            ],
        ),
        migrations.CreateModel(
            name='Location',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('street_address1', models.CharField(max_length=255)),
                ('street_address2', models.CharField(blank=True, max_length=255, null=True)),
                ('city', models.CharField(max_length=100)),
                ('zip_code', models.CharField(max_length=20)),
                ('country', models.CharField(max_length=100)),
            ],
        ),
        migrations.CreateModel(
            name='UserProfile',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('profile_picture', models.ImageField(blank=True, null=True, upload_to='profile_pics/')),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='profile', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='OperatingHour',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('day', models.CharField(choices=[('MON', 'Monday'), ('TUE', 'Tuesday'), ('WED', 'Wednesday'), ('THU', 'Thursday'), ('FRI', 'Friday'), ('SAT', 'Saturday'), ('SUN', 'Sunday')], max_length=3)),
                ('open_time', models.TimeField()),
                ('close_time', models.TimeField()),
                ('gym', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='operating_hours', to='gymFindr.gym')),
            ],
        ),
        migrations.CreateModel(
            name='MembershipType',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('type', models.CharField(choices=[('DAY_PASS', 'Day Pass'), ('WEEKLY_PASS', 'Weekly Pass'), ('BIWEEKLY_PASS', 'Bi-weekly Pass'), ('MONTH', 'Monthly Membership'), ('YEAR', 'Annual Membership')], max_length=100)),
                ('price', models.DecimalField(decimal_places=2, max_digits=6)),
                ('gym', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='membership_types', to='gymFindr.gym')),
            ],
        ),
        migrations.CreateModel(
            name='GymImage',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('image', models.ImageField(blank=True, null=True, upload_to='gym_images/')),
                ('gym', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='images', to='gymFindr.gym')),
            ],
        ),
        migrations.AddField(
            model_name='gym',
            name='location',
            field=models.OneToOneField(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='gymFindr.location'),
        ),
        migrations.AddField(
            model_name='gym',
            name='owner',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL),
        ),
        migrations.CreateModel(
            name='Favorite',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('gym', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='favorited_by', to='gymFindr.gym')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='favorites', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'unique_together': {('user', 'gym')},
            },
        ),
    ]
